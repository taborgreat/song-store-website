const Artist = require("../models/artist");
const Song = require("../models/song")
const asyncHandler = require("express-async-handler");
const { body, validationResult } = require("express-validator");


exports.artist_list = asyncHandler(async (req,res,next) => {

    const allArtists = await Artist.find().sort({family_name: 1}).exec();

    res.render("artist_list", {
        title: "All Artists",
        artist_list: allArtists,
    })
    
})

exports.artist_detail = asyncHandler(async(req,res,next)=> {
    const [artist, allSongsByArtist] = await Promise.all([
        Artist.findById(req.params.id).exec(),
        Song.find({artist: req.params.id }, "title summary").exec(),
    ]);

    if (artist === null) {
        // No results.
        const err = new Error("Artist not found");
        err.status = 404;
        return next(err);
      }
    
      res.render("artist_detail", {
        title: "Artist Details",
        artist: artist,
        artist_songs: allSongsByArtist,
      });
    });

        


exports.artist_create_get = (req, res, next) => {
    res.render("artist_form", { title: "Create Artist" });
    };

    exports.artist_create_post = [
        // Validate and sanitize fields.
        body("username")
          .trim()
          .isLength({ min: 1 })
          .escape()
          .withMessage("Username must be specified."),
        body("bio")
          .trim()
          .isLength({ min: 1 })
          .escape()
          .withMessage("Bio must be at least 1 character."),
      
        // Process request after validation and sanitization.
        asyncHandler(async (req, res, next) => {
          // Extract the validation errors from a request.
          const errors = validationResult(req);
      
          // Create Author object with escaped and trimmed data
          const artist = new Artist({
            username: req.body.username,
            bio: req.body.bio,
          });
      
          if (!errors.isEmpty()) {
            // There are errors. Render form again with sanitized values/errors messages.
            res.render("artist_form", {
              title: "Create Artist",
              artist: artist,
              errors: errors.array(),
            });
            return;
          } else {
            // Data from form is valid.
      
            // Save author.
            await artist.save();
            // Redirect to new author record.
            res.redirect(artist.url);
          }
        }),
      ];

exports.artist_delete_get = asyncHandler(async(req,res,next)=> {
    res.send("artist delete Get")
})

exports.artist_delete_post = asyncHandler(async(req,res,next)=> {
    res.send("artist delete Post")
})

exports.artist_update_get = asyncHandler(async(req,res,next)=> {
    res.send("artist update Get")
})

exports.artist_update_post = asyncHandler(async(req,res,next)=> {
    res.send("artist update Post")
})