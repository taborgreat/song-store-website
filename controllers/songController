const Song = require("../models/song");
const Artist = require("../models/artist")
const Genre = require("../models/genre")
const asyncHandler = require("express-async-handler");
const { body, validationResult } = require("express-validator");



exports.index = asyncHandler(async (req,res,next) =>{
    const [
        numSongs,
        numArtists,
        numGenres
        //,number of songs sold
    ] = await Promise.all([
        Song.countDocuments({}).exec(),
        Artist.countDocuments({}).exec(),
        Genre.countDocuments({}).exec(),
    ]);

    res.render("index", {
        title: "Song Store",
        song_count: numSongs,
        artist_count: numArtists,
        genre_count: numGenres,
    })
});

exports.song_list = asyncHandler(async (req,res,next) => {

    const allSongs = await Song.find({}, "title artist key bpm genre")
        .sort({ title: 1 })
        .populate("artist")
        .populate("genre")
        .exec();

    res.render("song_list", {title: "All Songs", song_list: allSongs })
})

exports.song_detail = asyncHandler(async(req,res,next)=> {
    const song = await Song.findById(req.params.id)
        .populate("artist")
        .populate("genre")
        .exec();
    if (song === null) {
    
        const err = new Error("Song not found");
        err.status = 404;
        return next(err);
  }
    
    res.render("song_detail", {
        song: song,
    });
})

exports.song_create_get = asyncHandler(async (req, res, next) => {
    const [allArtists, allGenres] = await Promise.all([
      Artist.find().exec(),
      Genre.find().exec(),
    ]);
  
    res.render("song_form", {
      title: "Upload Song",
      artists: allArtists,
      genres: allGenres,
    });
  });

//
exports.song_create_post = [
    (req, res, next) => {
      if (!(req.body.genre instanceof Array)) {
        if (typeof req.body.genre === "undefined") req.body.genre = [];
        else req.body.genre = new Array(req.body.genre);
      }
      next();
    },
  
  
    // Validate and sanitize fields.
    body("title", "Title must not be empty.")
      .trim()
      .isLength({ min: 1 })
      .escape(),
    body("artist", "Artist must not be empty.")
      .trim()
      .isLength({ min: 1 })
      .escape(),
    body("desc", "Description must not be empty.")
      .trim()
      .isLength({ min: 1 })
      .escape(),
    body("key", "Key must not be empty").trim().isLength({ min: 1 }).escape(),
    body("bpm", "bpm must not be empty").trim().isLength({ min: 1 }).escape(),
    body("genre.*").escape(),
    body("songUpload", "10mb max upload limit. MP3, OGG, and WAV ONLY!").escape(),
    // Process request after validation and sanitization.
    asyncHandler(async (req, res, next) => {
      // Extract the validation errors from a request.
      const errors = validationResult(req);
      
      const fileError = {
        msg: 'Your file must be mp3, wav, or ogg and less than 10mb',
        param: 'songUpload', // Replace with the actual field name
      };
      
      var filePath;
    
      if(!req.file){
        errors.errors.push(fileError);
        filePath = 'noFile';
      }
      else {
        const fileName = req.file.filename;
        filePath = '/uploads/' + fileName;
      }
 
  

      const song = new Song({
        title: req.body.title,
        artist: req.body.artist,
        description: req.body.desc,
        key: req.body.key,
        bpm: req.body.bpm,
        genre: req.body.genre,
        fileUrl: filePath,
      });

      if (!errors.isEmpty()) {
    
        console.log(errors)
        // Get all artists and genres for the form.
        const [allArtists, allGenres] = await Promise.all([
          Artist.find().exec(),
          Genre.find().exec(),
        ]);


  
        res.render("song_form", {
          title: "Create song",
          artists: allArtists,
          genres: allGenres,
          song: song,
          errors: errors.array(),
        });
      } else {
        // Data from the form is valid. Save the song.
        await song.save();
        res.redirect(song.url);
      }
    }),
  ];
  

exports.song_delete_get = asyncHandler(async(req,res,next)=> {
    res.send("song delete Get")
})

exports.song_delete_post = asyncHandler(async(req,res,next)=> {
    res.send("song delete Post")
})

exports.song_update_get = asyncHandler(async(req,res,next)=> {
    res.send("song update Get")
})

exports.song_update_post = asyncHandler(async(req,res,next)=> {
    res.send("song update Post")
})